@page "/LoginPage"
@using System.Text;
@inject UserService _userService;
@inject NavigationManager _navigationManager;
@inject AppState _appState;

<h3>LoginPage</h3>
@if(Users == null)
{
    <p>Loading...</p>
}
else
{
    <div class="center">
        <p>Username</p>
        <p>
            <input @bind-value="username" />
        </p>

        <p>Password</p>
        <p>
            <input @bind-value="password" />
        </p>

        <button type="button" class="btn btn-success" @onclick="AuthorizeLogin">
            <span class="oi-pencil"></span>
            Login
        </button>
            
        <button type="button" class="btn btn-secondary" @onclick="Close">
            <span class="oi oi-media-skip-backward"></span>
            Close
        </button>
    </div>
}

<NotificationDialog @ref="WrongAuthorizationLogin" Description="@ConcatenatedValidationErrors"></NotificationDialog>
<ConfirmationDialog @ref="confirmationDialog" ConfirmationChanged="@OnConfirmationSelected" Question="Login successful!"></ConfirmationDialog>
@code {

    public string username, password;
    private List<User> Users { get; set; }
    public ConfirmationDialog confirmationDialog{ get; set; }
    public NotificationDialog WrongAuthorizationLogin{ get; set; }
    public List<ValidationError> ValidationErrors{ get; set; }
    public String ConcatenatedValidationErrors{ get; set; }

    protected override async Task OnInitializedAsync()
    {
        Users = await _userService.GetUsers();
    }

    private async void AuthorizeLogin()
    {
        var user = await _userService.GetUserByUserName(username,password);
        if(user==null)
        {
            ValidationErrors = Message(false);
            ConcatenatedValidationErrors = GetConcatenatedValidationErrors(ValidationErrors);
            WrongAuthorizationLogin.Show();
        }
        else
        {
            _appState.Role = user.RoleId;
            confirmationDialog.Show();
        }       
    }

    private void Close()
    {
        _navigationManager.NavigateTo("/");
    }
    private List<ValidationError> Message(bool successful)
    {
        var validationErrors = new List<ValidationError>();

        if (successful == true)
            validationErrors.Add(new ValidationError { Description = "Successful login!" });
        else
            validationErrors.Add(new ValidationError { Description = "Wrong Authorization!" });

        return validationErrors;
    }

    private string GetConcatenatedValidationErrors(List<ValidationError> ValidationErrors)
    {
        StringBuilder message = new StringBuilder();
        foreach(var error in ValidationErrors)
        {
            if (message.Length == 0)
                message.Append(error.Description);
            else
                message.Append($"{Environment.NewLine} {error.Description}");

        }
        return message.ToString();
    }
    private void OnConfirmationSelected(bool isConfirmed)
    {
        if (isConfirmed == true)
            Close();
    }
}
