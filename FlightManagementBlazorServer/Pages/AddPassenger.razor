@page "/AddPassenger"
@using System.Text;
@inject PassengerService _passengerService;
@inject NavigationManager _navigationManager;

<h3>AddPassenger</h3>
<EditForm Model="Passenger" OnValidSubmit="@AddPassengerAsync">
    <PassengerFields Passenger="@Passenger"></PassengerFields>
    <br />
    <button type="submit" class="btn btn-success">
        <span class="oi oi-pencil"></span>
        Add Passenger
    </button>

    <button type="button" class="btn btn-secondary" @onclick="Close">
        <span class="oi oi-media-skip-backward"></span>
        Close
    </button>

</EditForm>

<NotificationDialog @ref="NotificationDialog" Description="@ConcatenatedValidationErrors"></NotificationDialog>

@code {
    public Passenger Passenger { get; set; }
    public NotificationDialog NotificationDialog{ get; set; }
    public List<ValidationError> ValidationErrors{ get; set; }
    public String ConcatenatedValidationErrors{ get; set; }
    protected override async Task OnInitializedAsync()
    {
        Passenger = new Passenger();
    }     
    private async Task AddPassengerAsync()
    {
        ValidationErrors = ValidatePassenger();
        if(ValidationErrors.Any())
        {
            ConcatenatedValidationErrors = GetConcatenatedValidationErrors(ValidationErrors);
            NotificationDialog.Show();
        }
        else
        {
            await _passengerService.AddPassenger(Passenger);
            Close(); 
        }
        
    }

    private void Close()
    {
        _navigationManager.NavigateTo("/PassengerList");
    }  

    private List<ValidationError> ValidatePassenger()
    {
        var validationErrors = new List<ValidationError>();
        
        if (String.IsNullOrWhiteSpace(Passenger.Name))
            validationErrors.Add(new ValidationError { Description = "Please insert Passenger Name!" });

        if (String.IsNullOrWhiteSpace(Passenger.Surname))
            validationErrors.Add(new ValidationError { Description = "Please insert Passenger Surname!" });
       
        if (Passenger.Gender == null)
            validationErrors.Add(new ValidationError { Description = "Please select Gender!" });

        
        return validationErrors;
    }

    private string GetConcatenatedValidationErrors(List<ValidationError> ValidationErrors)
    {
        StringBuilder message = new StringBuilder();
        foreach(var error in ValidationErrors)
        {
            if (message.Length == 0)
                message.Append(error.Description);
            else
                message.Append($"{Environment.NewLine} {error.Description}");

        }
        return message.ToString();
    }
}
